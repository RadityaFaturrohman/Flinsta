// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  username      String        @unique
  email         String?       @unique
  bio           String?
  password      String?
  emailVerified DateTime?     @map("email_verified")
  avatar        String?
  banner        String?
  birthday      DateTime?
  region        String?
  gender        Gender        @default(private)
  privacy       Privacy       @default(private)
  role          Role          @default(user)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  Boards        Board[]
  Pins          Pin[]
  Like          Like[]
  Comment       Comment[]
  Follower      UserFollow[]
  FollowedUser  UserFollow[]  @relation("FollowedUser")
  PinOnBoards   PinOnBoards[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Board {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  name        String        @unique
  description String?
  privacy     Privacy       @default(public)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Pins        PinOnBoards[]

  @@index([userId], map: "boards_user_id_fkey")
  @@map("boards")
}

model Pin {
  id            String        @id @default(cuid())
  title         String?
  description   String?
  userId        String?       @map("user_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  link          String?
  privacy       Privacy       @default(public)
  showTags      Boolean       @default(true) @map("show_tags")
  allowComments Boolean       @default(true) @map("allow_comments")
  Photos        Photo[]
  User          User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Like          Like[]
  Comment       Comment[]
  Tags          Tag[]
  Boards        PinOnBoards[]

  @@index([userId], map: "pins_user_id_fkey")
  @@map("pins")
}

model PinOnBoards {
  pinId      String   @map("pin_id")
  pin        Pin      @relation(fields: [pinId], references: [id])
  boardId    String   @map("board_id")
  board      Board?   @relation(fields: [boardId], references: [id])
  assignedAt DateTime @default(now())
  userId     String   @map("user_id")
  assignedBy User     @relation(fields: [userId], references: [id])

  @@id([pinId, boardId])
}

model Photo {
  id        String   @id @default(cuid())
  pinId     String   @map("pin_id")
  photo     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Pin       Pin      @relation(fields: [pinId], references: [id])

  @@index([pinId], map: "photos_pin_id_fkey")
  @@map("photos")
}

model Tag {
  id        String   @id @default(cuid())
  pinId     String   @map("pin_id")
  tag       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  Pin       Pin      @relation(fields: [pinId], references: [id])

  @@index([pinId], map: "tags_pin_id_fkey")
  @@map("tags")
}

model Like {
  id        String   @id @default(cuid())
  pinId     String   @map("pin_id")
  userId    String   @map("user_id")
  isLiked   Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Pin       Pin      @relation(fields: [pinId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@index([pinId], map: "like_pin_id_fkey")
  @@index([userId], map: "like_user_id_fkey")
  @@map("likes")
}

model Comment {
  id           String        @id @default(cuid())
  pinId        String        @map("pin_id")
  userId       String        @map("user_id")
  replyToId    String?       @map("reply_to_id")
  content      String
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  replyTo      Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      Comment[]     @relation("ReplyTo")
  Pin          Pin           @relation(fields: [pinId], references: [id])
  User         User          @relation(fields: [userId], references: [id])

  @@index([replyToId], map: "comments_parent_comment_id_fkey")
  @@index([pinId], map: "comments_pin_id_fkey")
  @@index([userId], map: "comments_user_id_fkey")
  @@map("comments")
}

model UserFollow {
  id             String   @id @default(cuid())
  followerId     String   @map("follower_id")
  followedUserId String   @map("followed_user_id")
  followed       Boolean
  createdAt      DateTime @default(now()) @map("created_at")
  updateAt       DateTime @updatedAt @map("update_at")
  Follower       User     @relation(fields: [followerId], references: [id])
  FollowedUser   User     @relation("FollowedUser", fields: [followedUserId], references: [id])

  @@unique([followerId, followedUserId], map: "user_follow_follower_id_followed_user_id_key")
  @@index([followerId], map: "user_follow_follower_id_index")
  @@index([followedUserId], map: "user_follow_followed_user_id_index")
  @@map("user_follows")
}

enum Role {
  user
  admin
}

enum Privacy {
  private
  public
}

enum Gender {
  male
  female
  private
}